import { faArrowLeft, faFileAlt } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import React from "react";
import {
  useExamsByTeacherId,
  useExamsResultsByStudentId,
  useStudentsAndRequestsByTeacherIdAndTable,
} from "../../QueriesAndMutations/QueryHooks";
import { Link, useParams } from "react-router-dom";
import ErrorPlaceHolder from "../../components/ErrorPlaceHolder";
import { useCurrentUser } from "../../store/useStore";
import NoDataPlaceHolder from "../../components/NoDataPlaceHolder";
import Loader from "../../components/Loader";
import ExamItemInTeacherProfile from "../../components/ExamItemInTeacherProfile";

export default function TeacherExams() {
  const { id: teacherId } = useParams();
  const { currentUser } = useCurrentUser();

  const {
    data: exams,
    isLoading: isExamsLoading,
    error: examsError,
  } = useExamsByTeacherId(teacherId, true);

  const {
    data: teacherStudents,
    isLoading: isTeacherStudentsLoading,
    error: teacherStudentsError,
  } = useStudentsAndRequestsByTeacherIdAndTable(teacherId, "teachers_students");

  const CurrentStudentStage = teacherStudents.find(
    (student) => student.studentId === currentUser.id
  )?.stage;
  "CurrentStudentStage", CurrentStudentStage;

  const {
    data: takenExams,
    isLoading: isExamsTakenByStudentLoading,
    error: examsTakenByStudentError,
  } = useExamsResultsByStudentId(currentUser?.id);

  if (
    isExamsLoading ||
    isTeacherStudentsLoading ||
    isExamsTakenByStudentLoading
  ) {
    return <Loader message="جاري التحميل" />;
  }

  if (examsError || teacherStudentsError || examsTakenByStudentError) {
    return (
      <ErrorPlaceHolder
        message={"حدث خطأ أثناء جلب الاختبارات، أعد المحاولة"}
      />
    );
  }

  if (!exams || exams.length === 0) {
    return (
      <NoDataPlaceHolder
        icon={faFileAlt}
        message="لا يوجد اختبارات متاحة حاليًا"
      />
    );
  }

  const publishedStageExams = exams.filter(
    (exam) => exam.stage === CurrentStudentStage || exam.stage === ""
  );

  const examsTakenByStudent = takenExams?.filter(
    (exam) => exam.teacherId === teacherId
  );

  if (publishedStageExams.length === 0) {
    return (
      <NoDataPlaceHolder
        icon={faFileAlt}
        message="لا يوجد اختبارات متاحة حاليًا"
      />
    );
  }

  return (
    <div className="max-w-4xl mx-auto p-2">
      <div className="bg-white rounded-xl shadow-lg overflow-hidden">
        <h1 className="py-4 text-center bg-gradient-to-r from-green-500 to-emerald-600 font-bold text-white text-xl relative">
          <div className="absolute left-4 top-1/2 transform -translate-y-1/2 bg-white/20 rounded-full w-8 h-8 flex items-center justify-center">
            <FontAwesomeIcon icon={faFileAlt} className="text-white" />
          </div>
          قائمة الاختبارات
          <div className="absolute right-4 top-1/2 transform -translate-y-1/2 bg-white/20 rounded-full w-8 h-8 flex items-center justify-center">
            <FontAwesomeIcon icon={faFileAlt} className="text-white" />
          </div>
        </h1>

        <div className="p-4">
          {exams.length === 0 ? (
            <div className="py-8 text-center text-gray-500 bg-gray-50 rounded-lg border border-dashed border-gray-300">
              لا يوجد اختبارات متاحة حاليًا
            </div>
          ) : (
            <div className="space-y-3">
              {publishedStageExams.map((exam) => (
                <ExamItemInTeacherProfile
                  isExamTaken={(examsTakenByStudent || [])?.some(
                    (e) => e.examId === exam.id
                  )}
                  key={exam.id}
                  exam={exam}
                />
              ))}
            </div>
          )}
        </div>
      </div>

      <div className="mt-6 flex justify-center">
        <Link
          to="/"
          className="flex items-center gap-2 text-blue-600 hover:text-blue-800 transition-colors"
        >
          <FontAwesomeIcon icon={faArrowLeft} />
          <span>العودة إلى قائمة المعلمين</span>
        </Link>
      </div>
    </div>
  );
}

/*
import { faArrowLeft, faFileAlt } from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import React from "react";
import {
  useExamsByTeacherId,
  useExamsResultsByTeacherId,
  useStudentsAndRequestsByTeacherIdAndTable,
} from "../../QueriesAndMutations/QueryHooks";
import { Link, useParams } from "react-router-dom";
import ErrorPlaceHolder from "../../components/ErrorPlaceHolder";
import { useCurrentUser } from "../../store/useStore";
import NoDataPlaceHolder from "../../components/NoDataPlaceHolder";
import Loader from "../../components/Loader";
import ExamItemInTeacherProfile from "../../components/ExamItemInTeacherProfile";

export default function TeacherExams() {
  const { id: teacherId } = useParams();
  const { currentUser } = useCurrentUser();

  const {
    data: exams,
    isLoading: isExamsLoading,
    error: examsError,
  } = useExamsByTeacherId(teacherId, true);

  (exams);

  const {
    data: examsTakenByStudent,
    isLoading: isexamsTakenByStudentLoading,
    error: examsTakenByStudentError,
  } = useExamsResultsByTeacherId(teacherId, currentUser?.id);

  ("examsTakenByStudent: ", examsTakenByStudent);

  const {
    data: students,
    isLoading: isStudentsLoading,
    error: studentsError,
  } = useStudentsAndRequestsByTeacherIdAndTable(teacherId, "teachers_students");

  const currentStudentStage =
    students?.find((student) => student.studentId === currentUser.id)?.stage ||
    null;

  const isThereAnyExamForMyId = exams?.some(
    (exam) => exam.stage === currentStudentStage
  );
  const isTherePublicExam = exams?.some((exam) => exam.stage == "");

  if (isExamsLoading || isexamsTakenByStudentLoading || isStudentsLoading) {
    return <Loader message="جري التحميل" />;
  }

  if (examsError || examsTakenByStudentError || studentsError) {
    return (
      <ErrorPlaceHolder
        message={"حدث خطأ أثناء جلب الاختبارات، أعد المحاولة"}
      />
    );
  }

  if (exams?.length === 0 || (!isThereAnyExamForMyId && !isTherePublicExam))
    return (
      <NoDataPlaceHolder
        icon={faFileAlt}
        message="لا يوجد اختبارات متاحة حاليًا"
      />
    );

  return (
    <div className="max-w-4xl mx-auto p-2">
      <div className="bg-white rounded-xl shadow-lg overflow-hidden">
        <h1 className="py-4 text-center bg-gradient-to-r from-green-500 to-emerald-600 font-bold text-white text-xl relative">
          <div className="absolute left-4 top-1/2 transform -translate-y-1/2 bg-white/20 rounded-full w-8 h-8 flex items-center justify-center">
            <FontAwesomeIcon icon={faFileAlt} className="text-white" />
          </div>
          قائمة الاختبارات
          <div className="absolute right-4 top-1/2 transform -translate-y-1/2 bg-white/20 rounded-full w-8 h-8 flex items-center justify-center">
            <FontAwesomeIcon icon={faFileAlt} className="text-white" />
          </div>
        </h1>

        <div className="p-4">
          {exams.length === 0 ? (
            <div className="py-8 text-center text-gray-500 bg-gray-50 rounded-lg border border-dashed border-gray-300">
              لا يوجد اختبارات متاحة حاليًا
            </div>
          ) : (
            <div className="space-y-3">
              {exams
                .filter(
                  (exam) =>
                    exam.stage === currentStudentStage || exam.stage === ""
                )
                .map((exam) => (
                  <ExamItemInTeacherProfile
                    isExamTaken={(examsTakenByStudent || [])?.some(
                      (e) => e.examId === exam.id
                    )}
                    key={exam.id}
                    exam={exam}
                  />
                ))}
            </div>
          )}
        </div>
      </div>

      <div className="mt-6 flex justify-center">
        <Link
          to="/"
          className="flex items-center gap-2 text-blue-600 hover:text-blue-800 transition-colors"
        >
          <FontAwesomeIcon icon={faArrowLeft} />
          <span>العودة إلى قائمة المعلمين</span>
        </Link>
      </div>
    </div>
  );
}

*/
