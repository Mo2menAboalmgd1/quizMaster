import React, { useEffect } from "react";
import { useCurrentUser } from "../../store/useStore";
import {
  useDoneTasksByStudentId,
  useStagesByStagesIds,
  useStagesByStudentId,
  useTasksByUsersIds,
  useTeachersFromTeachersStudents,
  useUserDataByUsersIdsAndKey,
} from "../../QueriesAndMutations/QueryHooks";
import Loader from "../../components/Loader";
import ErrorPlaceHolder from "../../components/ErrorPlaceHolder";
import NoDataPlaceHolder from "../../components/NoDataPlaceHolder";
import { faTasks } from "@fortawesome/free-solid-svg-icons";
import clsx from "clsx";
import {
  useAddNewTaskMutation,
  useCheckTaskMutation,
} from "../../QueriesAndMutations/mutationsHooks";

export default function StudentTasks() {
  const { currentUser } = useCurrentUser();
  const myId = currentUser?.id;

  const {
    data: mySubsciptions,
    isLoading: isSubsciptionsLoading,
    isError: isSubsciptionsError,
  } = useTeachersFromTeachersStudents(myId);

  const usersIds = mySubsciptions?.map((sub) => sub.teacherId) ?? [];

  const {
    data: teachersData,
    isLoading: isTeachersLoading,
    isError: isTeachersError,
  } = useUserDataByUsersIdsAndKey(usersIds, "teachers", "teachers");

  console.log("teachersData:  ", teachersData);

  const {
    data: allTasks,
    isLoading: isTasksLoading,
    isError: isTasksError,
  } = useTasksByUsersIds([...usersIds, myId]);

  const {
    data: doneTasks,
    isLoading: isDoneTasksLoading,
    isError: isDoneTasksError,
  } = useDoneTasksByStudentId(myId);

  console.log("doneTasks:  ", doneTasks);

  const {
    data: stages,
    isLoading: isStagesLoading,
    isError: isStagesError,
  } = useStagesByStudentId(myId);

  const stagesIds = stages?.map((stage) => stage.stage_id);

  const {
    data: stagesData,
    isLoading: isStagesDataLoading,
    isError: isStagesDataError,
  } = useStagesByStagesIds(stagesIds);

  const myTasks = allTasks?.filter(
    (task) =>
      stagesData?.some((stage) => stage?.id === task?.stage_id) ||
      !task?.stage_id
  );

  console.log("myTasks:  ", myTasks);

  if (
    isSubsciptionsLoading ||
    isTasksLoading ||
    isTeachersLoading ||
    isStagesLoading ||
    isStagesDataLoading ||
    isDoneTasksLoading
  ) {
    return <Loader message="جاري التحميل" />;
  }

  if (
    isSubsciptionsError ||
    isTasksError ||
    isTeachersError ||
    isStagesError ||
    isStagesDataError ||
    isDoneTasksError
  ) {
    return <ErrorPlaceHolder />;
  }

  if (!allTasks) {
    return <NoDataPlaceHolder message={"لا يوجد مهام حاليا"} icon={faTasks} />;
  }

  return (
    <div
      
      className="min-h-screen"
    >
      <div className="max-w-3xl mx-auto px-4 py-8">
        <div className="text-center mb-12">
          <h1 className="text-4xl font-bold text-slate-800 mb-2">
            قائمة مهامي
          </h1>
          <div className="w-20 h-1 bg-gradient-to-r from-blue-500 to-indigo-500 mx-auto rounded-full"></div>
        </div>

        <AddNewTaskForm />

        <div className="space-y-4">
          {myTasks?.map((task) => {
            const teacher = teachersData?.find(
              (teacher) => teacher.id === task.user_id
            );
            const isDone = doneTasks?.some(
              (doneTask) => doneTask.task_id === task.id
            );
            return (
              <StudentTask
                key={task.id}
                task={task}
                teacher={teacher}
                usersIds={usersIds}
                isDone={isDone}
              />
            );
          })}
        </div>
      </div>
    </div>
  );
}

function AddNewTaskForm() {
  const { currentUser } = useCurrentUser();
  const { mutate: addNewTask } = useAddNewTaskMutation();

  const handleAddNewTask = () => {
    const taskInput = document.getElementById("task");
    if (taskInput && taskInput.value.trim()) {
      addNewTask({
        stage_id: null,
        user_id: currentUser?.id,
        task: taskInput.value,
        isTeacher: false,
      });
      taskInput.value = "";
    }
  };

  return (
    <div className="mb-8">
      <div className="bg-white rounded-xl shadow-sm border border-slate-200 p-6 hover:shadow-md transition-shadow duration-300">
        <div className="space-y-4">
          <label
            htmlFor="task"
            className="block text-sm font-medium text-slate-700"
          >
            إضافة مهمة جديدة
          </label>
          <input
            type="text"
            id="task"
            placeholder="اكتب مهمتك هنا..."
            className="w-full px-4 py-3 border border-slate-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent outline-none transition-all duration-200 placeholder-slate-400"
          />
          <button
            onClick={handleAddNewTask}
            className="w-full bg-blue-600 hover:bg-blue-700 text-white font-medium py-3 px-6 rounded-lg transition-colors duration-200 active:scale-[0.98]"
          >
            إضافة المهمة
          </button>
        </div>
      </div>
    </div>
  );
}

function StudentTask({ task, teacher, usersIds, isDone }) {
  const [isChecked, setIsChecked] = React.useState(false);
  const { currentUser } = useCurrentUser();

  useEffect(() => {
    setIsChecked(isDone);
  }, [isDone]);

  const { mutate: checkTaskMutation } = useCheckTaskMutation();
  const handleCheckTask = (newChecked) => {
    setIsChecked(newChecked);

    checkTaskMutation({
      isChecked: newChecked,
      usersIds,
      taskId: task.id,
      studentId: currentUser?.id,
    });
  };

  return (
    <div
      className={clsx(
        "bg-white rounded-xl border transition-all duration-300 hover:shadow-md",
        isChecked
          ? "border-green-200 bg-green-50/50"
          : "border-slate-200 hover:border-slate-300"
      )}
    >
      <div className="p-5">
        <div className="flex items-start gap-3 mb-4">
          {task.isTeacher ? (
            <div className="flex-1">
              <div className="flex items-center gap-2 mb-1">
                <div
                  className={clsx(
                    "w-2 h-2 rounded-full",
                    isChecked ? "bg-green-500" : "bg-blue-500"
                  )}
                ></div>
                <span className="text-xs font-medium text-slate-500 uppercase tracking-wide">
                  {teacher?.gender === "male" ? "الأستاذ" : "الأستاذة"}
                </span>
              </div>
              <h4
                className={clsx(
                  "font-medium transition-colors duration-200",
                  isChecked ? "text-green-700" : "text-slate-700"
                )}
              >
                {teacher?.name} - {teacher?.subject}
              </h4>
            </div>
          ) : (
            <div className="flex-1">
              <div className="flex items-center gap-2 mb-1">
                <div
                  className={clsx(
                    "w-2 h-2 rounded-full",
                    isChecked ? "bg-green-500" : "bg-indigo-500"
                  )}
                ></div>
                <span className="text-xs font-medium text-slate-500 uppercase tracking-wide">
                  مهمة شخصية
                </span>
              </div>
            </div>
          )}
        </div>

        <div className="flex items-center gap-4">
          <label
            className="flex items-center gap-3 flex-1 cursor-pointer group"
            htmlFor={`taskCheckBox-${task.id}`}
          >
            <div className="relative">
              <input
                type="checkbox"
                id={`taskCheckBox-${task.id}`}
                className="sr-only"
                checked={isChecked}
                onChange={(e) => handleCheckTask(e.target.checked)}
              />
              <div
                className={clsx(
                  "w-5 h-5 rounded border-2 flex items-center justify-center transition-all duration-200",
                  isChecked
                    ? "bg-green-500 border-green-500 text-white"
                    : "border-slate-300 group-hover:border-slate-400"
                )}
              >
                {isChecked && (
                  <svg
                    className="w-3 h-3"
                    fill="currentColor"
                    viewBox="0 0 20 20"
                  >
                    <path
                      fillRule="evenodd"
                      d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
                      clipRule="evenodd"
                    />
                  </svg>
                )}
              </div>
            </div>
            <span
              className={clsx(
                "flex-1 transition-all duration-200",
                isChecked
                  ? "text-green-600 line-through opacity-75"
                  : "text-slate-800 group-hover:text-slate-900"
              )}
            >
              {task.task}
            </span>
          </label>
        </div>
      </div>

      {isChecked && (
        <div className="h-1 bg-gradient-to-r from-green-400 to-emerald-500 rounded-b-xl"></div>
      )}
    </div>
  );
}
