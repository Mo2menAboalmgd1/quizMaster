import React from "react";
import {
  usePostsByTeacherId,
  useReactionsByTeachersIds,
  useTeachersFromTeachersStudents,
  useTeachersPosts,
} from "../../QueriesAndMutations/QueryHooks";
import { useCurrentUser } from "../../store/useStore";
import Loader from "../../components/Loader";
import ErrorPlaceHolder from "../../components/ErrorPlaceHolder";
import { faMessage } from "@fortawesome/free-solid-svg-icons";
import { useParams } from "react-router-dom";
import NoDataPlaceHolder from "../../components/NoDataPlaceHolder";
import { PostInStudentPosts } from "../../components/PostInStudentPosts";

export default function StudentPosts() {
  const { currentUser } = useCurrentUser();
  const { id: teacherId } = useParams();
  (teacherId);

  // get my teachers
  const {
    data: mySubscriptions,
    isLoading: imsMySubscriptionsLoading,
    error: mySubscriptionsError,
  } = useTeachersFromTeachersStudents(currentUser?.id);

  (mySubscriptions);

  const {
    data: teacherPosts,
    isLoading: isTeacherPostsLoading,
    error: teacherPostsError,
  } = usePostsByTeacherId(teacherId);

  (teacherPosts);

  const teachersIds = Array.isArray(mySubscriptions)
    ? mySubscriptions.map((sub) => sub.teacherId)
    : [];

  const subscriptions = Array.isArray(mySubscriptions)
    ? mySubscriptions.map((sub) => ({
        teacherId: sub.teacherId,
        stage_id: sub.stage_id,
      }))
    : [];

  const allowedPairs = new Set(
    mySubscriptions?.map((sub) => `${sub.teacherId}_${sub.stage}`)
  );

  const {
    data: teachersPosts,
    isLoading: isTeachersPostsLoading,
    error: teachersPostsError,
  } = useTeachersPosts(subscriptions);

  // filter posts depending on myTeachers and stage
  let filteredPosts;
  if (teacherId) {
    filteredPosts = teacherPosts?.filter((post) => {
      if (post.stage !== "") {
        return allowedPairs.has(`${post.teacherId}_${post.stage}`);
      }

      return mySubscriptions.some((sub) => sub.teacherId === post.teacherId);
    });
  } else {
    filteredPosts = teachersPosts?.filter((post) => {
      if (post.stage !== "") {
        return allowedPairs.has(`${post.teacherId}_${post.stage}`);
      }

      return mySubscriptions.some((sub) => sub.teacherId === post.teacherId);
    });
  }

  const {
    data: postReactions,
    isLoading: isPostReactionsLoading,
    error: postReactionsError,
  } = useReactionsByTeachersIds(teachersIds);

  (postReactions);

  // loader and errors
  if (
    imsMySubscriptionsLoading ||
    isTeachersPostsLoading ||
    isPostReactionsLoading ||
    isTeacherPostsLoading
  ) {
    return <Loader message="جاري التحميل" />;
  }

  if (
    mySubscriptionsError ||
    teachersPostsError ||
    postReactionsError ||
    teacherPostsError
  ) {
    return (
      <ErrorPlaceHolder message={"حدث خطأ أثناء جلب المنشورات، أعد المحاولة"} />
    );
  }

  if (!filteredPosts || filteredPosts.length === 0) {
    return <NoDataPlaceHolder message={"لا يوجد منشورات"} icon={faMessage} />;
  }

  const reactionsByPostId = {};

  postReactions?.forEach((r) => {
    if (!reactionsByPostId[r.post_id]) {
      reactionsByPostId[r.post_id] = [];
    }
    reactionsByPostId[r.post_id].push(r);
  });

  return (
    <div className="max-w-2xl mx-auto space-y-5" >
      {filteredPosts?.map((post) => {
        return (
          <PostInStudentPosts
            key={post.id}
            post={post}
            reactions={reactionsByPostId[post.id] || []}
          />
        );
      })}
    </div>
  );
}
