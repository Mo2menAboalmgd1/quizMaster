import React from "react";
import { useParams } from "react-router-dom";
import clsx from "clsx";
import {
  useAnswersByStudentIdAndExamId,
  useExamByItsId,
  useExamsResultsByStudentIdAndExamId,
  useQuestionsByExamId,
} from "../../QueriesAndMutations/QueryHooks";
import toast from "react-hot-toast";
import {
  useSaveAnswer,
  useSaveStudentResult,
} from "../../QueriesAndMutations/mutationsHooks";
import { useCurrentUser } from "../../store/useStore";
import {
  faCheckCircle,
  faExclamationTriangle,
  faPaperPlane,
  faQuestionCircle,
  faTimesCircle,
} from "@fortawesome/free-solid-svg-icons";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import Loader from "../../components/Loader";
import DisplayFile from "../../components/DisplayFile";

export default function Exam() {
  const { id: examId } = useParams();
  const { currentUser } = useCurrentUser();
  const [isShowResult, setIsShowResult] = React.useState(false);
  const [fileDisplayed, setFileDisplayed] = React.useState(null);

  const {
    data: studentSubmittedAnswers,
    isLoading: isAnswersLoading,
    error: answersError,
  } = useAnswersByStudentIdAndExamId(currentUser?.id, examId);

  const {
    data: exam,
    isLoading: isExamLoading,
    error: examError,
  } = useExamByItsId(examId);

  const {
    data: examResult,
    isLoading: isExamResultLoading,
    error: examResultError,
  } = useExamsResultsByStudentIdAndExamId(currentUser?.id, examId);

  const {
    data: questions,
    isLoading: isQuestionsLoading,
    error: questionsError,
  } = useQuestionsByExamId(examId);

  const { mutateAsync: saveAnswerMutation } = useSaveAnswer();

  const handleSaveAnswer = async (
    optionId,
    questionId,
    selectedOptionText,
    actualCorrectTextForQuestion
  ) => {
    const answerPayload = {
      id: optionId,
      studentId: currentUser.id,
      questionId,
      examId,
      selectedAns: selectedOptionText,
      correctAns: actualCorrectTextForQuestion,
      isCorrect: selectedOptionText === actualCorrectTextForQuestion,
    };
    await saveAnswerMutation(answerPayload);
  };

  const unansweredQuestions = questions?.filter((question) => {
    return !studentSubmittedAnswers?.some(
      (answer) => answer.questionId === question.id
    );
  });

  const { mutateAsync: saveResultMutation } = useSaveStudentResult();

  const handleSendExam = async () => {
    if (!studentSubmittedAnswers || studentSubmittedAnswers.length === 0) {
      toast.error("الرجاء الإجابة على بعض الأسئلة أولاً.");
      return;
    }

    let correctCount = 0;
    studentSubmittedAnswers.forEach((ans) => {
      if (ans.isCorrect) correctCount++;
    });

    setIsShowResult(true);

    try {
      await saveResultMutation({
        grade: correctCount,
        studentId: currentUser.id,
        examId,
        total: questions?.length,
        teacherId: exam?.teacherId,
      });
      toast.success("تم إرسال الامتحان بنجاح");
    } catch (error) {
      console.error("خطأ أثناء إرسال الامتحان:", error);
      toast.error("حدث خطأ أثناء إرسال الامتحان");
    }
  };

  const correctCount =
    studentSubmittedAnswers && Array.isArray(studentSubmittedAnswers)
      ? studentSubmittedAnswers.filter((ans) => ans.isCorrect).length
      : 0;

  const wrongCount = studentSubmittedAnswers
    ? studentSubmittedAnswers.length - correctCount
    : 0;

  const unansweredCount = unansweredQuestions?.length || 0;

  if (
    isExamLoading ||
    isQuestionsLoading ||
    isAnswersLoading ||
    isExamResultLoading
  )
    return <Loader message="جاري التحميل..." />;

  if (examError) {
    toast.error(examError.message);
    return <div>حدث خطأ أثناء تحميل بيانات الامتحان.</div>;
  }
  if (questionsError) {
    toast.error(questionsError.message);
    return <div>حدث خطأ أثناء تحميل الأسئلة.</div>;
  }
  if (answersError) {
    // console.warn("Answers error:", answersError.message);
  }
  if (examResultError) {
    // console.warn("Exam result error:", examResultError.message);
  }

  if (!exam) {
    toast.error("لم يتم العثور على الامتحان");
    return (
      <div>لم يتم العثور على هذا الامتحان يبدو أنه غير موجود أو تم حذفه</div>
    );
  }
  if (!questions) {
    toast.error("لم يتم العثور على أسئلة لهذا الامتحان");
    return <div>لم يتم العثور على أسئلة لهذا الامتحان.</div>;
  }

  const displayResultsMode = isShowResult || !!examResult;

  return (
    <div className="flex flex-col items-center gap-8 p-6 max-w-4xl mx-auto">
      <div className="w-full bg-white rounded-xl shadow-lg p-5">
        <h2 className="text-2xl font-bold text-center py-3 px-6 bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-lg shadow-sm mb-2">
          {exam.title}
        </h2>
        {examResult && !isShowResult ? (
          <>
            <p className="text-center text-gray-600 text-sm mt-4">
              لقد قمت بالإجابة على هذا الامتحان مسبقا
            </p>
            <p className="font-bold text-blue-800 text-xl mt-2 text-center">
              درجتك هي <span>{examResult?.grade}</span> من{" "}
              <span>{examResult?.total}</span>
            </p>
          </>
        ) : !displayResultsMode ? (
          <p className="text-center text-gray-600 text-sm mt-4">
            قم بالإجابة على جميع الأسئلة ثم اضغط على زر إرسال الامتحان
          </p>
        ) : null}
      </div>

      <div className="space-y-8 w-full">
        {questions?.map((question, index) => {
          const actualCorrectTextForQuestion = question.correct?.text;

          const isQuestionUnansweredInResults =
            displayResultsMode &&
            unansweredQuestions?.some((q) => q.id === question.id);

          return (
            <div
              key={question.id || index}
              className={clsx(
                "border rounded-xl p-5 transition-all shadow-sm hover:shadow-md",
                isQuestionUnansweredInResults
                  ? "bg-gradient-to-r from-orange-50 to-amber-50 border-orange-400"
                  : "bg-gradient-to-r from-gray-50 to-slate-50 border-gray-300"
              )}
              dir="rtl"
            >
              {isQuestionUnansweredInResults && (
                <div className="mb-4 text-center font-semibold text-orange-600 bg-orange-100 py-2 px-4 rounded-lg border border-orange-200 flex items-center justify-center gap-2">
                  <FontAwesomeIcon icon={faExclamationTriangle} />
                  <span>سؤال لم يتم الإجابة عليه</span>
                </div>
              )}

              <div className="flex gap-3 w-full items-start mb-4">
                <div className="bg-gradient-to-r from-gray-600 to-gray-700 text-white px-4 py-2 rounded-lg text-lg font-bold shadow-sm flex items-center justify-center min-w-10">
                  {index + 1}
                </div>
                <div className="p-4 bg-white border border-gray-200 rounded-lg grow font-medium shadow-sm">
                  {question.text}
                </div>
              </div>

              <div className="flex gap-2 flex-wrap justify-center mb-4">
                {question.images &&
                  question.images.length > 0 &&
                  question.images.map((image, idx) => (
                    <img
                      onClick={() => setFileDisplayed(image)}
                      key={idx}
                      src={image}
                      alt={`Question image ${idx + 1}`}
                      className="max-h-40 object-contain rounded-lg cursor-pointer"
                    />
                  ))}
              </div>

              <div className="space-y-3 pr-12">
                {question.answers.map((answerOption, optIdx) => {
                  const optionId = `${question.id}-${optIdx}`;

                  const studentAnswerRecord = studentSubmittedAnswers?.find(
                    (ans) => ans.questionId === question.id
                  );

                  const isThisOptionTheActualCorrectOne =
                    answerOption.text === actualCorrectTextForQuestion;

                  // This will always be true or false, making the input controlled
                  const didStudentSelectThisOption =
                    studentAnswerRecord?.selectedAns === answerOption.text;

                  let optionBgColor = "bg-white";
                  let optionBorderColor = "border-gray-200";
                  let optionTextColor = "";

                  if (displayResultsMode) {
                    if (didStudentSelectThisOption) {
                      if (studentAnswerRecord?.isCorrect) {
                        optionBgColor = "bg-green-50";
                        optionBorderColor = "border-green-300";
                        optionTextColor = "text-green-800";
                      } else {
                        optionBgColor = "bg-red-50";
                        optionBorderColor = "border-red-300";
                        optionTextColor = "text-red-800";
                      }
                    } else if (isThisOptionTheActualCorrectOne) {
                      optionBgColor = "bg-green-50";
                      optionBorderColor = "border-green-300";
                      optionTextColor = "text-green-800";
                    }
                  }

                  return (
                    <div
                      key={optIdx}
                      className={clsx(
                        "flex items-center p-3 rounded-lg border transition-all",
                        optionBgColor,
                        optionBorderColor,
                        !displayResultsMode && "hover:border-blue-300 bg-white"
                      )}
                    >
                      <input
                        disabled={displayResultsMode}
                        onChange={() =>
                          handleSaveAnswer(
                            optionId,
                            question.id,
                            answerOption.text,
                            actualCorrectTextForQuestion
                          )
                        }
                        type="radio"
                        id={optionId}
                        name={question.id.toString()} // Name must be a string and unique per question
                        checked={didStudentSelectThisOption} // Consistently controlled
                        className="w-5 h-5 accent-blue-600"
                      />
                      <label
                        htmlFor={optionId}
                        className={clsx(
                          "flex-grow cursor-pointer flex items-center gap-2 ml-3",
                          optionTextColor
                        )}
                      >
                        <span>{answerOption.text}</span>
                        {answerOption.image && (
                          <img
                            src={answerOption.image}
                            alt={`Option ${optIdx + 1}`}
                            className="max-h-16 max-w-[80px] object-contain rounded-md hover:opacity-80 transition-opacity cursor-pointer"
                            onClick={(e) => {
                              e.stopPropagation(); // Prevent label click if image is clicked
                              setFileDisplayed(answerOption.image);
                            }}
                          />
                        )}
                      </label>

                      {displayResultsMode && (
                        <>
                          {didStudentSelectThisOption &&
                            studentAnswerRecord?.isCorrect && (
                              <span className="ml-auto text-green-600">
                                <FontAwesomeIcon icon={faCheckCircle} />
                              </span>
                            )}
                          {didStudentSelectThisOption &&
                            !studentAnswerRecord?.isCorrect && (
                              <span className="ml-auto text-red-600">
                                <FontAwesomeIcon icon={faTimesCircle} />
                              </span>
                            )}
                          {isThisOptionTheActualCorrectOne &&
                            !didStudentSelectThisOption && (
                              <span className="ml-auto text-green-600">
                                <FontAwesomeIcon icon={faCheckCircle} />
                              </span>
                            )}
                        </>
                      )}
                    </div>
                  );
                })}
              </div>
            </div>
          );
        })}
      </div>
      {fileDisplayed && (
        <DisplayFile setFileDisplayed={setFileDisplayed} file={fileDisplayed} />
      )}

      {!displayResultsMode && (
        <button
          onClick={handleSendExam}
          disabled={
            !studentSubmittedAnswers || studentSubmittedAnswers.length === 0
          }
          className="py-3 px-8 bg-gradient-to-r from-blue-600 to-blue-700 hover:from-blue-700 hover:to-blue-800 text-white font-semibold rounded-lg shadow-md transition-all transform hover:scale-105 flex items-center gap-2 disabled:opacity-50 disabled:cursor-not-allowed"
        >
          <FontAwesomeIcon icon={faPaperPlane} />
          <span>إرسال الإمتحان</span>
        </button>
      )}

      {displayResultsMode && (examResult || isShowResult) && (
        <div className="flex flex-col items-center gap-4 bg-gradient-to-r from-gray-50 to-slate-100 p-6 rounded-xl border border-gray-300 shadow-lg w-full max-w-md">
          <h2 className="text-xl font-bold border-b-2 border-gray-300 pb-2 w-full text-center">
            نتيجة الإمتحان
          </h2>
          {isExamResultLoading && !isShowResult ? (
            <Loader message="جاري تحميل النتيجة..." />
          ) : (
            <div dir="rtl" className="space-y-4 text-lg w-full">
              <div className="bg-gradient-to-r from-blue-50 to-blue-100 border border-blue-200 rounded-lg p-4 text-center">
                <p className="font-bold text-blue-800 text-xl mb-1">
                  درجتك هي{" "}
                  <span className="text-2xl">
                    {isShowResult ? correctCount : examResult?.grade}
                  </span>{" "}
                  من <span>{questions?.length || examResult?.total}</span>
                </p>
                <div className="w-full bg-gray-200 rounded-full h-2.5 my-2">
                  <div
                    className="bg-blue-600 h-2.5 rounded-full"
                    style={{
                      width: `${
                        ((isShowResult ? correctCount : examResult?.grade) /
                          (questions?.length || examResult?.total || 1)) *
                        100
                      }%`,
                    }}
                  ></div>
                </div>
                <p className="text-sm text-gray-600">
                  {(
                    ((isShowResult ? correctCount : examResult?.grade) /
                      (questions?.length || examResult?.total || 1)) *
                    100
                  ).toFixed(2)}
                  %
                </p>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
                <div className="bg-green-50 border border-green-200 rounded-lg p-3 text-center">
                  <p className="text-green-700 font-semibold flex items-center justify-center gap-2">
                    <FontAwesomeIcon
                      icon={faCheckCircle}
                      className="text-green-600"
                    />
                    <span>{correctCount}</span>
                  </p>
                  <p className="text-xs text-green-700 mt-1">
                    الإجابات الصحيحة
                  </p>
                </div>

                <div className="bg-red-50 border border-red-200 rounded-lg p-3 text-center">
                  <p className="text-red-700 font-semibold flex items-center justify-center gap-2">
                    <FontAwesomeIcon
                      icon={faTimesCircle}
                      className="text-red-600"
                    />
                    <span>{wrongCount}</span>
                  </p>
                  <p className="text-xs text-red-700 mt-1">الإجابات الخاطئة</p>
                </div>

                <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-3 text-center">
                  <p className="text-yellow-700 font-semibold flex items-center justify-center gap-2">
                    <FontAwesomeIcon
                      icon={faQuestionCircle}
                      className="text-yellow-600"
                    />
                    <span>{unansweredCount}</span>
                  </p>
                  <p className="text-xs text-yellow-700 mt-1">بدون إجابة</p>
                </div>
              </div>
            </div>
          )}
        </div>
      )}
    </div>
  );
}
