// old code






import React, { useState, useEffect } from "react";
import clsx from "clsx";
import { useQuestionsByExamId } from "../QueriesAndMutations/QueryHooks";

export default function DisplayAnswersInCreateExam({ examId }) {
  const [animatedItems, setAnimatedItems] = useState([]);

  const {
    data: questions,
    isLoading: isQuestionsLoading,
    error: questionsError,
  } = useQuestionsByExamId(examId);

  useEffect(() => {
    if (questions && !isQuestionsLoading) {
      const timer = setTimeout(() => {
        setAnimatedItems(questions.map((question) => question.id));
      }, 100);
      return () => clearTimeout(timer);
    }
  }, [questions, isQuestionsLoading]);

  if (isQuestionsLoading) {
    return (
      <div className="flex justify-center items-center py-6">
        <div className="flex flex-col items-center gap-2">
          <div className="w-12 h-12 border-4 border-green-400 border-t-transparent rounded-full animate-spin"></div>
          <p className="text-gray-600">جاري تحميل الأسئلة...</p>
        </div>
      </div>
    );
  }

  if (questionsError) {
    return (
      <div className="bg-red-50 border border-red-200 rounded-lg p-4 text-center space-y-2">
        <svg
          className="w-10 h-10 mx-auto text-red-500"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth={2}
            d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
          />
        </svg>
        <h3 className="text-lg font-semibold text-red-800">
          خطأ في تحميل البيانات
        </h3>
        <p className="text-red-700">{questionsError.message}</p>
      </div>
    );
  }

  if (!questions || questions.length === 0) {
    return (
      <div className="bg-white rounded-lg shadow-md p-6 text-center space-y-2">
        <svg
          className="w-16 h-16 mx-auto text-gray-400"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            strokeLinecap="round"
            strokeLinejoin="round"
            strokeWidth="2"
            d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"
          />
        </svg>
        <h2 className="text-xl font-medium text-gray-700">
          لا يوجد أسئلة حالياً
        </h2>
      </div>
    );
  }

  return (
    <div className="mt-8 space-y-8">
      <div className="bg-gradient-to-r from-blue-500 to-blue-400 rounded-lg shadow-md p-4 mb-4">
        <h2 className="text-2xl font-bold text-white text-center">
          الأسئلة المضافة
        </h2>
        <div className="w-24 h-1 bg-white mx-auto rounded-full mt-2 opacity-50"></div>
      </div>

      {questions.map((question, index) => (
        <div
          key={question.id || index}
          className={`transition-all duration-500 transform bg-white rounded-lg shadow-md overflow-hidden border-2 border-transparent hover:border-blue-400 ${
            animatedItems.includes(question.id)
              ? "opacity-100 translate-y-0"
              : "opacity-0 translate-y-8"
          }`}
          style={{ transitionDelay: `${index * 100}ms` }}
          dir="rtl"
        >
          <div className="bg-gray-100 p-5 border-b border-gray-300 flex items-center gap-4">
            <div className="w-10 h-10 rounded-full bg-blue-200 text-blue-800 flex items-center justify-center text-lg font-bold">
              {index + 1}
            </div>
            <div className="flex-grow">
              <h3 className="font-semibold text-lg text-gray-800">
                {question.text}
              </h3>
            </div>
          </div>

          <div className="p-5 space-y-3">
            {question.answers.map((answer, ansIndex) => (
              <div
                key={ansIndex}
                className={clsx(
                  "flex items-center p-3 rounded-lg transition-colors gap-3",
                  question.correct === answer
                    ? "bg-green-50 border border-green-400"
                    : "bg-gray-50 border border-gray-200 hover:bg-gray-100"
                )}
              >
                <div
                  className={clsx(
                    "w-5 h-5 rounded-full flex items-center justify-center font-bold",
                    question.correct === answer
                      ? "bg-green-500 text-white"
                      : "bg-gray-300 text-gray-700"
                  )}
                >
                  {/* {ansIndex + 1} */}
                </div>
                <div className="flex-grow text-gray-800">{answer}</div>
                {question.correct === answer && (
                  <div className="text-green-600">
                    <svg
                      className="w-5 h-5"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth={2}
                        d="M5 13l4 4L19 7"
                      />
                    </svg>
                  </div>
                )}
              </div>
            ))}
          </div>
        </div>
      ))}
    </div>
  );
}
