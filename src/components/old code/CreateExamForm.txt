// old code


import React, { useState } from "react";
import { useCurrentUser } from "../store/useStore";
import { useQueryClient } from "@tanstack/react-query";
import {
  useCreateNewExamMutation,
  useEditExamDataMutation,
} from "../QueriesAndMutations/mutationsHooks";
import { useQuestionsByExamId } from "../QueriesAndMutations/QueryHooks";
import toast from "react-hot-toast";

export default function CreateExamForm({
  examData,
  examId,
  setExamId,
  isCreate,
}) {
  const { currentUser } = useCurrentUser();
  const queryClient = useQueryClient();
  const [animationComplete, setAnimationComplete] = useState(false);

  React.useEffect(() => {
    setTimeout(() => {
      setAnimationComplete(true);
    }, 300);
  }, []);

  const { mutate: newExamMutation } = useCreateNewExamMutation(
    setExamId,
    queryClient
  );

  const { mutate: editExamMutation } = useEditExamDataMutation(
    examId,
    queryClient
  );

  const handleCreateNewExam = (e) => {
    e.preventDefault();
    const formData = new FormData(e.target);
    const testData = {
      subject: currentUser.subject,
      title: formData.get("examName"),
      grade: Number(formData.get("examGrade")),
      teacherId: currentUser.id,
    };
    if (!testData.title || !testData.grade) {
      toast.error("الرجاء ملء جميع الحقول المطلوبة");
      return;
    }
    newExamMutation(testData);
    toast.success("تم إنشاء الامتحان بنجاح", { duration: 1500 });
  };

  const handleEditExam = (e) => {
    e.preventDefault();
    const formData = new FormData(e.target);
    const testData = {
      title: formData.get("examName"),
      grade: Number(formData.get("examGrade")),
      teacherId: currentUser.id,
    };
    if (!testData.title || !testData.grade) {
      toast.error("الرجاء ملء جميع الحقول المطلوبة");
      return;
    }
    editExamMutation({ testData, examId: examData.id });
    toast.success("تم تعديل الامتحان بنجاح", { duration: 1500 });
  };

  const { data } = useQuestionsByExamId(examId);
  const { mutateAsync: publishExamMutation } = useEditExamDataMutation(
    examId,
    queryClient
  );

  const handlePublishExam = async () => {
    if (!data || data.length < 1) {
      return toast.error("لا يوجد أسئلة في الاختبار");
    }

    const testData = {
      done: true,
    };

    await publishExamMutation({ testData, examId: examData.id });
    toast.success("تم نشر الاختبار بنجاح", { duration: 1500 });
  };

  return (
    <div
      className={`transition-opacity duration-500 ease-in-out bg-white rounded-lg shadow-md overflow-hidden mb-6 ${
        animationComplete ? "opacity-100" : "opacity-0"
      }`}
      dir="rtl"
    >
      <div className="bg-gradient-to-r from-green-500 to-green-400 p-6">
        <h2 className="text-xl font-bold text-white text-center">
          {isCreate
            ? examData
              ? "تعديل اختبار"
              : "إنشاء اختبار جديد"
            : "تعديل اختبار"}
        </h2>
        <p className="text-green-50 text-center mt-1">{currentUser.subject}</p>
      </div>

      <form
        onSubmit={
          isCreate
            ? examData
              ? handleEditExam
              : handleCreateNewExam
            : handleEditExam
        }
        className="p-6 space-y-4"
      >
        <div className="space-y-2">
          <label
            htmlFor="examName"
            className="block text-sm font-medium text-gray-700"
          >
            اسم الامتحان
          </label>
          <input
            id="examName"
            className="w-full h-12 px-4 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent transition-colors"
            name="examName"
            type="text"
            placeholder="اكتب اسم الامتحان هنا"
            defaultValue={examData ? examData.title : ""}
            required
          />
        </div>

        <div className="space-y-2">
          <label
            htmlFor="examGrade"
            className="block text-sm font-medium text-gray-700"
          >
            المرحلة الدراسية
          </label>
          <select
            name="examGrade"
            id="examGrade"
            defaultValue={examData ? examData.grade : ""}
            className="w-full h-12 px-4 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-green-500 focus:border-transparent transition-colors"
            required
          >
            <option value="" disabled>
              اختر المرحلة الدراسية
            </option>
            <optgroup label="المرحلة الإعدادية">
              <option value="7">الصف الأول الاعدادي</option>
              <option value="8">الصف الثاني الاعدادي</option>
              <option value="9">الصف الثالث الاعدادي</option>
            </optgroup>
            <optgroup label="المرحلة الثانوية">
              <option value="10">الصف الأول الثانوي</option>
              <option value="11">الصف الثاني الثانوي</option>
              <option value="12">الصف الثالث الثانوي</option>
            </optgroup>
          </select>
        </div>

        <div className="flex justify-between items-center pt-4">
          <button
            type="submit"
            className="py-3 px-6 bg-green-500 text-white font-medium rounded-md hover:bg-green-600 transition-colors transform hover:-translate-y-1 hover:shadow-md active:translate-y-0"
          >
            {isCreate
              ? examData
                ? "تعديل الامتحان"
                : "إنشاء الامتحان"
              : "تعديل الامتحان"}
          </button>

          {examData && (
            <button
              onClick={handlePublishExam}
              type="button"
              className="py-3 px-6 bg-blue-600 text-white font-medium rounded-md hover:bg-blue-700 transition-colors transform hover:-translate-y-1 hover:shadow-md active:translate-y-0"
            >
              نشر الامتحان
            </button>
          )}
        </div>
      </form>
    </div>
  );
}
